//Convert a Binary Tree into Doubly Linked List in spiral fashion
#include<bits/stdc++.h>
using namespace std;

struct Node 
{ 
    int data; 
    struct Node *left, *right; 
}; 

void push(Node** head,Node** temp, Node* node)
{
	if(*temp==NULL)
	{
		*head=node;
		node->left=NULL;
		*temp=node;
	}
	else
	{
		(*temp)->right=node;
		node->left=(*temp);
		*temp=node;
	}
	
}

void printList(Node *node) 
{ 
    while (node != NULL) 
    { 
        cout << node->data << " "; 
        node = node->right; 
    } 
} 

void spiralLevelOrder(Node *root)
{
	
	if(root==NULL)
	   return;
	deque<Node*> q;
	Node* prev=NULL;
	Node*  head=NULL;
	
	q.push_front(root);
	
	int level=0;
	while(!q.empty())
	{
		
		int nc=q.size();
		if(level&1)
		{
			while(nc>0)
			{
				
				Node* node=q.front();
				q.pop_front();
				
				
				if(node->left!=NULL)
				q.push_back(node->left);
				if(node->right!=NULL)
				q.push_back(node->right);
				push(&head,&prev,node);
				nc--;
			}
		}
		
		else
		{
			
			while(nc>0)
			{
				
				Node* node=q.back();
				q.pop_back();
				
				
				if (node->right != NULL) 
                    q.push_front(node->right); 
                if (node->left != NULL) 
                    q.push_front(node->left); 
                 push(&head,&prev,node);   
                nc--;
				
			}
		}
		
		level++;
	}
	
	prev->right=NULL;
	printList(head);
}




Node* newNode(int data) 
{ 
    Node *temp = new Node; 
    temp->data = data; 
    temp->left = temp->right = NULL; 
  
    return temp; 
} 
  
int main()
{
	 Node *root =  newNode(1); 
    root->left = newNode(2); 
    root->right = newNode(3); 
    root->left->left = newNode(4); 
    root->left->right = newNode(5); 
    root->right->left = newNode(6); 
    root->right->right = newNode(7); 
    root->left->left->left  = newNode(8); 
    root->left->left->right  = newNode(9); 
    root->left->right->left  = newNode(10); 
    root->left->right->right  = newNode(11);  
    root->right->left->right  = newNode(13); 
    root->right->right->left  = newNode(14); 
    spiralLevelOrder(root);
}
